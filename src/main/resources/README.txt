# Client

  Run `yarn start` using the locally installed yarn executable. After the first launch `proxy.config.json` file will be automatically created in the project's root. In this file you may specify the next properties:
  
  * *proxyTarget*: Location of the running server application. By default it will use `localhost:8080`, so you may need to specify `proxyTarget` only if you manually changed this behavior.

  * *fallbackProxyTarget*: Location of the running BackOffice application (local, remote or a mock server). You may need to specify this property if your client application uses External API package and requires some of the shared dictionaries (segments, for example).
  
  * *fallbackProxyOnly*: Optionally may be enabled to proxy own namespaces to fallback proxy (useful if server is not running locally and you are working only with client code).
  
  * *fallbackProxyToken*: Required if `fallbackProxyTarget` points to a real instance of BackOffice application, since dictionaries are available only to authorized users.
  
  * *configOverridesPath*: Location of the `proxy.config.json` file outside of the project's directory. It may be used to override some properties globally for multiple projects. Also you may remove the autogenerated file and replace it with symlink to shared proxy configuration.

# Service

## Non docker-based local environment (not recommended):

1. Install Nodejs 14.x and Yarn 1.22.5
2. Run service dependencies like Kafka, Redis and etc.
3. Run `yarn install` to get all the dependencies installed.
4. Make configuration in .env file.
```
# Eureka URL, you can specify any: stage or pre-prod
EUREKA_URL=http://eureka.stage-sm-stage-9.svc.headless.k8s.sm-stage.dub:8080
# Profiles for cloud config
CLOUD_CONFIG_ENV=stage,logging
# Branch from Stash/Versions repo
CLOUD_CONFIG_LABEL=feature(_)your-custom-branch,master
# Set only if start service in production mode
LOGSTASH_SERVICE_HOST=0.0.0.0
LOGSTASH_SERVICE_PORT=3002
```
5. Run `yarn start:dev` to start server in development mode.

## Docker-based local environment:

Run `yarn start:dev:docker` to build and run application with up and running external dependencies inside docker containers (prometheus, kafka).

Modify `prometheus.yml` to change Prometheus configuration.

1. To check public service you can visit http://localhost:8080/api/public/data
2. Management application is accessible via http://localhost:8081/health
3. To check prometheus metrics visit http://localhost:9090/metrics

Use `Ctrl+C` to stop local environment.

## Formatting

The project comes with prettier configs and extensions built in.

You can format the project manually by running the command `yarn run format` and prettier will format the project for you.

You may want to install an extension for your IDE though. More details on the same is available at https://prettier.io

## Linting

You can customize rules if needed using the .eslintrc file placed in the root directory. While linting is run everytime you build/start the server, you can manually run it by `yarn run lint`

## Editorconfig

A .editorconfig file has been added to the project to enable consistency in development across different IDEs used by different developers. Visit http://editorconfig.org for more information. You might have to install plugins in your editor to get this to work.

## Running Tests

You can run your tests by using `yarn test` command. The project is bundled with [JEST](https://jestjs.io/) as the test framework.
